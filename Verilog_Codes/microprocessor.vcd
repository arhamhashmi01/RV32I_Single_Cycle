$date
	Fri Oct 27 15:22:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module microprocessor_tb $end
$var reg 1 ! clk $end
$var reg 1 " enable $end
$var reg 32 # instruction [31:0] $end
$var reg 1 $ rst $end
$scope module u_microprocessor0 $end
$var wire 1 ! clk $end
$var wire 1 " enable $end
$var wire 4 % instruc_mask_singal [3:0] $end
$var wire 32 & instruction [31:0] $end
$var wire 1 ' instruction_mem_request $end
$var wire 1 ( instruction_mem_we_re $end
$var wire 1 $ rst $end
$var wire 32 ) store_data [31:0] $end
$var wire 32 * pc_address [31:0] $end
$var wire 4 + mask [3:0] $end
$var wire 32 , load_data_out [31:0] $end
$var wire 32 - instruction_data [31:0] $end
$var wire 1 . instruc_mem_valid $end
$var wire 1 / data_mem_we_re $end
$var wire 1 0 data_mem_valid $end
$var wire 1 1 data_mem_request $end
$var wire 32 2 alu_out_address [31:0] $end
$scope module u_core $end
$var wire 32 3 alu_out_address [31:0] $end
$var wire 1 ! clk $end
$var wire 4 4 instruc_mask_singal [3:0] $end
$var wire 1 ' instruction_mem_request $end
$var wire 1 ( instruction_mem_we_re $end
$var wire 4 5 mask_singal [3:0] $end
$var wire 32 6 pc_address [31:0] $end
$var wire 1 $ rst $end
$var wire 32 7 wrap_load_out [31:0] $end
$var wire 32 8 store_data_out [31:0] $end
$var wire 1 9 store $end
$var wire 32 : rd_wb_data [31:0] $end
$var wire 32 ; pc_address_out [31:0] $end
$var wire 32 < opb_mux_out [31:0] $end
$var wire 32 = opa_mux_out [31:0] $end
$var wire 32 > op_b [31:0] $end
$var wire 32 ? next_sel_address [31:0] $end
$var wire 1 @ next_sel $end
$var wire 2 A mem_to_reg [1:0] $end
$var wire 4 B mask [3:0] $end
$var wire 32 C load_data_in [31:0] $end
$var wire 1 D load $end
$var wire 32 E instruction [31:0] $end
$var wire 1 . instruc_mem_valid $end
$var wire 32 F instruc_data_out [31:0] $end
$var wire 1 / data_mem_we_re $end
$var wire 1 0 data_mem_valid $end
$var wire 1 1 data_mem_request $end
$var wire 1 G branch_result $end
$var wire 32 H alu_res_out [31:0] $end
$var wire 4 I alu_control [3:0] $end
$scope module u_decodestage $end
$var wire 1 ! clk $end
$var wire 32 J opb_data [31:0] $end
$var wire 1 $ rst $end
$var wire 32 K uj_immo [31:0] $end
$var wire 32 L u_immo [31:0] $end
$var wire 1 9 store $end
$var wire 32 M sb_immo [31:0] $end
$var wire 32 N s_immo [31:0] $end
$var wire 1 O reg_write $end
$var wire 32 P rd_wb_data [31:0] $end
$var wire 32 Q pc_address [31:0] $end
$var wire 1 R operand_b $end
$var wire 1 S operand_a $end
$var wire 32 T opb_mux_out [31:0] $end
$var wire 32 U opa_mux_out [31:0] $end
$var wire 32 V op_b [31:0] $end
$var wire 32 W op_a [31:0] $end
$var wire 1 @ next_sel $end
$var wire 2 X mem_to_reg [1:0] $end
$var wire 1 D load $end
$var wire 32 Y instruction [31:0] $end
$var wire 3 Z imm_sel [2:0] $end
$var wire 32 [ imm_mux_out [31:0] $end
$var wire 32 \ i_immo [31:0] $end
$var wire 1 G branch_result $end
$var wire 1 ] branch $end
$var wire 4 ^ alu_control [3:0] $end
$scope module u_branch0 $end
$var wire 3 _ fun3 [2:0] $end
$var wire 32 ` op_b [31:0] $end
$var wire 32 a op_a [31:0] $end
$var wire 1 ] en $end
$var reg 1 G result $end
$upscope $end
$scope module u_cu0 $end
$var wire 3 b fun3 [2:0] $end
$var wire 1 c fun7 $end
$var wire 7 d opcode [6:0] $end
$var wire 1 e store $end
$var wire 1 O reg_write $end
$var wire 1 f r_type $end
$var wire 1 R operand_b $end
$var wire 1 S operand_a $end
$var wire 1 @ next_sel $end
$var wire 2 g mem_to_reg [1:0] $end
$var wire 1 h mem_en $end
$var wire 1 i lui $end
$var wire 1 j load $end
$var wire 1 k jalr $end
$var wire 1 l jal $end
$var wire 3 m imm_sel [2:0] $end
$var wire 1 n i_type $end
$var wire 1 o branch $end
$var wire 1 p auipc $end
$var wire 4 q alu_control [3:0] $end
$var wire 1 9 Store $end
$var wire 1 D Load $end
$var wire 1 ] Branch $end
$scope module u_controldec0 $end
$var wire 3 r fun3 [2:0] $end
$var wire 1 c fun7 $end
$var wire 1 e store $end
$var wire 1 f r_type $end
$var wire 1 i lui $end
$var wire 1 j load $end
$var wire 1 k jalr $end
$var wire 1 l jal $end
$var wire 1 n i_type $end
$var wire 1 o branch $end
$var wire 1 p auipc $end
$var reg 1 ] Branch $end
$var reg 1 D Load $end
$var reg 1 9 Store $end
$var reg 4 s alu_control [3:0] $end
$var reg 3 t imm_sel [2:0] $end
$var reg 1 h mem_en $end
$var reg 2 u mem_to_reg [1:0] $end
$var reg 1 @ next_sel $end
$var reg 1 S operand_a $end
$var reg 1 R operand_b $end
$var reg 1 O reg_write $end
$upscope $end
$scope module u_typedec0 $end
$var wire 7 v opcode [6:0] $end
$var reg 1 p auipc $end
$var reg 1 o branch $end
$var reg 1 n i_type $end
$var reg 1 l jal $end
$var reg 1 k jalr $end
$var reg 1 j load $end
$var reg 1 i lui $end
$var reg 1 f r_type $end
$var reg 1 e store $end
$upscope $end
$upscope $end
$scope module u_imm_gen0 $end
$var wire 32 w instr [31:0] $end
$var reg 32 x i_imme [31:0] $end
$var reg 32 y s_imme [31:0] $end
$var reg 32 z sb_imme [31:0] $end
$var reg 32 { u_imme [31:0] $end
$var reg 32 | uj_imme [31:0] $end
$upscope $end
$scope module u_mux0 $end
$var wire 32 } a [31:0] $end
$var wire 32 ~ b [31:0] $end
$var wire 32 !" c [31:0] $end
$var wire 32 "" d [31:0] $end
$var wire 32 #" e [31:0] $end
$var wire 32 $" f [31:0] $end
$var wire 32 %" g [31:0] $end
$var wire 32 &" h [31:0] $end
$var wire 3 '" sel [2:0] $end
$var reg 32 (" out [31:0] $end
$upscope $end
$scope module u_mux1 $end
$var wire 1 S sel $end
$var wire 32 )" out [31:0] $end
$var wire 32 *" b [31:0] $end
$var wire 32 +" a [31:0] $end
$upscope $end
$scope module u_mux2 $end
$var wire 32 ," b [31:0] $end
$var wire 1 R sel $end
$var wire 32 -" out [31:0] $end
$var wire 32 ." a [31:0] $end
$upscope $end
$scope module u_regfile0 $end
$var wire 1 ! clk $end
$var wire 1 O en $end
$var wire 5 /" rd [4:0] $end
$var wire 5 0" rs1 [4:0] $end
$var wire 5 1" rs2 [4:0] $end
$var wire 1 $ rst $end
$var wire 32 2" op_b [31:0] $end
$var wire 32 3" op_a [31:0] $end
$var wire 32 4" data [31:0] $end
$var integer 32 5" i [31:0] $end
$upscope $end
$upscope $end
$scope module u_executestage $end
$var wire 32 6" a_i [31:0] $end
$var wire 4 7" alu_control [3:0] $end
$var wire 32 8" b_i [31:0] $end
$var wire 32 9" pc_address [31:0] $end
$var wire 32 :" next_sel_address [31:0] $end
$var wire 32 ;" alu_res_out [31:0] $end
$scope module u_adder0 $end
$var wire 32 <" a [31:0] $end
$var reg 32 =" adder_out [31:0] $end
$upscope $end
$scope module u_alu0 $end
$var wire 32 >" a_i [31:0] $end
$var wire 32 ?" b_i [31:0] $end
$var wire 4 @" op_i [3:0] $end
$var reg 32 A" res_o [31:0] $end
$upscope $end
$upscope $end
$scope module u_fetchstage $end
$var wire 32 B" address_in [31:0] $end
$var wire 1 G branch_reselt $end
$var wire 1 ! clk $end
$var wire 4 C" mask [3:0] $end
$var wire 32 D" next_address [31:0] $end
$var wire 1 @ next_sel $end
$var wire 1 ' request $end
$var wire 1 $ rst $end
$var wire 1 ( we_re $end
$var wire 1 . valid $end
$var wire 32 E" instruction_fetch [31:0] $end
$var wire 32 F" address_out [31:0] $end
$var reg 32 G" instruction [31:0] $end
$scope module u_pc0 $end
$var wire 32 H" address_in [31:0] $end
$var wire 1 G branch_reselt $end
$var wire 1 ! clk $end
$var wire 32 I" next_address [31:0] $end
$var wire 1 @ next_sel $end
$var wire 1 $ rst $end
$var reg 32 J" address_out [31:0] $end
$upscope $end
$upscope $end
$scope module u_memorystage $end
$var wire 32 K" alu_out_address [31:0] $end
$var wire 32 L" instruction [31:0] $end
$var wire 1 D load $end
$var wire 32 M" op_b [31:0] $end
$var wire 1 9 store $end
$var wire 32 N" wrap_load_out [31:0] $end
$var wire 32 O" wrap_load_in [31:0] $end
$var wire 1 0 valid $end
$var wire 32 P" store_data_out [31:0] $end
$var wire 4 Q" mask [3:0] $end
$var reg 1 1 request $end
$var reg 1 / we_re $end
$scope module u_wrap_mem0 $end
$var wire 1 D Load $end
$var wire 2 R" byteadd [1:0] $end
$var wire 32 S" data_i [31:0] $end
$var wire 3 T" fun3 [2:0] $end
$var wire 1 9 mem_en $end
$var wire 32 U" wrap_load_in [31:0] $end
$var reg 32 V" data_o [31:0] $end
$var reg 4 W" masking [3:0] $end
$var reg 32 X" wrap_load_out [31:0] $end
$upscope $end
$upscope $end
$scope module u_wbstage $end
$var wire 32 Y" alu_out [31:0] $end
$var wire 32 Z" data_mem_out [31:0] $end
$var wire 2 [" mem_to_reg [1:0] $end
$var wire 32 \" next_sel_address [31:0] $end
$var wire 32 ]" rd_sel_mux_out [31:0] $end
$scope module u_mux2 $end
$var wire 32 ^" a [31:0] $end
$var wire 32 _" b [31:0] $end
$var wire 32 `" c [31:0] $end
$var wire 32 a" d [31:0] $end
$var wire 2 b" sel [1:0] $end
$var reg 32 c" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module u_data_memory $end
$var wire 8 d" address [7:0] $end
$var wire 1 ! clk $end
$var wire 32 e" data_in [31:0] $end
$var wire 4 f" mask [3:0] $end
$var wire 1 1 request $end
$var wire 1 / we_re $end
$var reg 32 g" data_out [31:0] $end
$var reg 1 0 valid $end
$upscope $end
$scope module u_instruction_memory $end
$var wire 8 h" address [7:0] $end
$var wire 1 ! clk $end
$var wire 32 i" data_in [31:0] $end
$var wire 4 j" mask [3:0] $end
$var wire 1 ' request $end
$var wire 1 ( we_re $end
$var reg 32 k" data_out [31:0] $end
$var reg 1 . valid $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx k"
b1111 j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bz a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
b0 H"
bx G"
bx F"
bx E"
bx D"
b1111 C"
b0 B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bz &"
bz %"
bz $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
xp
xo
xn
bx m
xl
xk
xj
xi
xh
bx g
xf
xe
bx d
xc
bx b
bx a
bx `
bx _
bx ^
x]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
xS
xR
bx Q
bx P
xO
bx N
bx M
bx L
bx K
bx J
bx I
bx H
xG
bx F
bx E
xD
bx C
bx B
bx A
x@
bx ?
bx >
bx =
bx <
bx ;
bx :
x9
bx 8
bx 7
bx 6
bx 5
b1111 4
bx 3
bx 2
x1
x0
x/
x.
bx -
bx ,
bx +
bx *
bx )
0(
1'
bx &
b1111 %
1$
bx #
0"
0!
$end
#5000
1.
1!
#10000
b0 h"
b100 ?
b100 :"
b100 ="
b100 \"
b100 `"
b0 *
b0 6
b0 ;
b0 Q
b0 *"
b0 9"
b0 <"
b0 F"
b0 J"
b100000 5"
0!
0$
#15000
b100000 5"
1!
#20000
0!
1$
#25000
b1 h"
b1000 ?
b1000 :"
b1000 ="
b1000 \"
b1000 `"
b100 *
b100 6
b100 ;
b100 Q
b100 *"
b100 9"
b100 <"
b100 F"
b100 J"
1!
#30000
0!
#35000
b10 h"
b1100 ?
b1100 :"
b1100 ="
b1100 \"
b1100 `"
b1000 *
b1000 6
b1000 ;
b1000 Q
b1000 *"
b1000 9"
b1000 <"
b1000 F"
b1000 J"
1!
#40000
0!
#45000
b11 h"
b10000 ?
b10000 :"
b10000 ="
b10000 \"
b10000 `"
b1100 *
b1100 6
b1100 ;
b1100 Q
b1100 *"
b1100 9"
b1100 <"
b1100 F"
b1100 J"
1!
#50000
0!
#55000
b100 h"
b10100 ?
b10100 :"
b10100 ="
b10100 \"
b10100 `"
b10000 *
b10000 6
b10000 ;
b10000 Q
b10000 *"
b10000 9"
b10000 <"
b10000 F"
b10000 J"
1!
#60000
0!
#65000
b101 h"
b11000 ?
b11000 :"
b11000 ="
b11000 \"
b11000 `"
b10100 *
b10100 6
b10100 ;
b10100 Q
b10100 *"
b10100 9"
b10100 <"
b10100 F"
b10100 J"
1!
#70000
0!
#75000
b110 h"
b11100 ?
b11100 :"
b11100 ="
b11100 \"
b11100 `"
b11000 *
b11000 6
b11000 ;
b11000 Q
b11000 *"
b11000 9"
b11000 <"
b11000 F"
b11000 J"
1!
#80000
0!
#85000
b111 h"
b100000 ?
b100000 :"
b100000 ="
b100000 \"
b100000 `"
b11100 *
b11100 6
b11100 ;
b11100 Q
b11100 *"
b11100 9"
b11100 <"
b11100 F"
b11100 J"
1!
#90000
0!
#95000
b1000 h"
b100100 ?
b100100 :"
b100100 ="
b100100 \"
b100100 `"
b100000 *
b100000 6
b100000 ;
b100000 Q
b100000 *"
b100000 9"
b100000 <"
b100000 F"
b100000 J"
1!
#100000
0!
#105000
b1001 h"
b101000 ?
b101000 :"
b101000 ="
b101000 \"
b101000 `"
b100100 *
b100100 6
b100100 ;
b100100 Q
b100100 *"
b100100 9"
b100100 <"
b100100 F"
b100100 J"
1!
#110000
0!
#115000
b1010 h"
b101100 ?
b101100 :"
b101100 ="
b101100 \"
b101100 `"
b101000 *
b101000 6
b101000 ;
b101000 Q
b101000 *"
b101000 9"
b101000 <"
b101000 F"
b101000 J"
1!
#120000
0!
#125000
b1011 h"
b110000 ?
b110000 :"
b110000 ="
b110000 \"
b110000 `"
b101100 *
b101100 6
b101100 ;
b101100 Q
b101100 *"
b101100 9"
b101100 <"
b101100 F"
b101100 J"
1!
#130000
0!
#135000
b1100 h"
b110100 ?
b110100 :"
b110100 ="
b110100 \"
b110100 `"
b110000 *
b110000 6
b110000 ;
b110000 Q
b110000 *"
b110000 9"
b110000 <"
b110000 F"
b110000 J"
1!
#140000
0!
#145000
b1101 h"
b111000 ?
b111000 :"
b111000 ="
b111000 \"
b111000 `"
b110100 *
b110100 6
b110100 ;
b110100 Q
b110100 *"
b110100 9"
b110100 <"
b110100 F"
b110100 J"
1!
#150000
0!
#155000
b1110 h"
b111100 ?
b111100 :"
b111100 ="
b111100 \"
b111100 `"
b111000 *
b111000 6
b111000 ;
b111000 Q
b111000 *"
b111000 9"
b111000 <"
b111000 F"
b111000 J"
1!
#160000
0!
#165000
b1111 h"
b1000000 ?
b1000000 :"
b1000000 ="
b1000000 \"
b1000000 `"
b111100 *
b111100 6
b111100 ;
b111100 Q
b111100 *"
b111100 9"
b111100 <"
b111100 F"
b111100 J"
1!
#170000
0!
#175000
b10000 h"
b1000100 ?
b1000100 :"
b1000100 ="
b1000100 \"
b1000100 `"
b1000000 *
b1000000 6
b1000000 ;
b1000000 Q
b1000000 *"
b1000000 9"
b1000000 <"
b1000000 F"
b1000000 J"
1!
#180000
0!
